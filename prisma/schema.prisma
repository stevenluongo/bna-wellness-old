// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  username  String     @unique
  firstName String
  lastName  String
  hash      String
  salt      String
  role      UserRole   @default(DEFAULT)
  title     UserTitle  @default(TRAINER)
  messages  Message[]
  replies   Reply[]
  terminals Terminal[]
  rooms     Room[]
  checks    Check[]
}

model Terminal {
  id         String        @id @default(cuid())
  openedAt   DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  closedAt   DateTime?
  logs       TerminalLog[]
  isActive   Boolean       @default(true)
  openedBy   User          @relation(fields: [openedById], references: [id])
  openedById String
  checks     Check[]
}

model TerminalLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  terminal   Terminal @relation(fields: [terminalId], references: [id])
  terminalId String
  message    String
}

model Check {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  startTime  DateTime
  endTime    DateTime
  weekStart  DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  terminal   Terminal @relation(fields: [terminalId], references: [id])
  terminalId String
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   String
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
}

model Room {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  startTime        DateTime
  endTime          DateTime
  conflictsAllowed Boolean
  location         String
  users            User[]
  events           Event[]
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  startTime DateTime
  endTime   DateTime
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  checks    Check[]
}

model Client {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  firstName     String
  lastName      String
  email         String?
  image         String?
  age           Int?
  homePhone     String?
  cellPhone     String?
  notes         String[]
  subscriptions Subscription[]
  checks        Check[]
}

enum UserRole {
  ADMIN
  DEFAULT
}

enum UserTitle {
  TRAINER
  OWNER
  THERAPIST
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  replies   Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

model Membership {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  name            String
  description     String
  isActive        Boolean                @default(true)
  stripePriceId   String
  stripeProductId String
  unitAmount      Int
  interval        MembershipIntervalType
  intervalCount   Int
  subscriptions   Subscription[]
}

enum MembershipIntervalType {
  month
  year
  week
  day
}

model Subscription {
  id                      String                                   @id @default(cuid())
  createdAt               DateTime                                 @default(now())
  isActive                Boolean                                  @default(true)
  cancelAtPeriodEnd       Boolean
  currentPeriodEnd        DateTime
  currentPeriodStart      DateTime
  defaultPaymentMethod    String
  membership              Membership                               @relation(fields: [membershipId], references: [id])
  membershipId            String
  stripeCustomerId        String
  stripeSubscriptionId    String
  stripePriceId           String
  billingCycleAnchor      DateTime
  status                  SubscriptionStatusType
  canceledAt              DateTime?
  cancellationDetails     SubscriptionCancellation?
  pauseCollectionBehavior SubscriptionPauseCollectionBehaviorType?
  latestInvoice           String
  client                  Client                                   @relation(fields: [clientId], references: [id])
  clientId                String
}

enum SubscriptionPauseCollectionBehaviorType {
  keep_as_draft
  mark_uncollectible
  void
}

enum SubscriptionStatusType {
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  trialing
  paused
}

model SubscriptionCancellation {
  id             String                               @id @default(cuid())
  comment        String
  feedback       SubscriptionCancellationFeedbackType
  reason         SubscriptionCancellationReasonType
  subscription   Subscription                         @relation(fields: [subscriptionId], references: [id])
  subscriptionId String                               @unique
}

enum SubscriptionCancellationFeedbackType {
  too_expensive
  missing_features
  switched_service
  unused
  customer_service
  too_complex
  low_quality
  other
}

enum SubscriptionCancellationReasonType {
  cancellation_requested
  payment_disputed
  payment_failed
}
